files <- list.files(pattern = "\\.csv$", path = "csv/")
for (input in files){
output <- basename(file.path(input,fsep=".csv"))
graph  <- read.csv(paste0("csv/", input), sep= ",", header = T, fileEncoding="UTF-16LE")
png(paste0("output for ", input,".png"))
ggplot(graph, aes(learning.evaluation.instances,classifications.correct..percent.)) +
geom_point() +
scale_x_continuous(breaks = round(seq(min(plotAccuracy$learning.evaluation.instances), max(plotAccuracy$learning.evaluation.instances), by = 3000),1)) +
scale_y_continuous(breaks = round(seq(min(plotAccuracy$classifications.correct..percent.), max(plotAccuracy$classifications.correct..percent.), by = 10),1))
dev.off()
}
library("ggplot2", lib.loc="~/R/win-library/3.1")
files <- list.files(pattern = "\\.csv$", path = "csv/")
for (input in files){
output <- basename(file.path(input,fsep=".csv"))
graph  <- read.csv(paste0("csv/", input), sep= ",", header = T, fileEncoding="UTF-16LE")
png(paste0("output for ", input,".png"))
ggplot(graph, aes(learning.evaluation.instances,classifications.correct..percent.)) +
library("ggplot2", lib.loc="~/R/win-library/3.1")
files <- list.files(pattern = "\\.csv$", path = "csv/")
for (input in files){
output <- basename(file.path(input,fsep=".csv"))
graph  <- read.csv(paste0("csv/", input), sep= ",", header = T, fileEncoding="UTF-16LE")
png(paste0("output for ", input,".png"))
ggplot(graph, aes(learning.evaluation.instances,classifications.correct..percent.)) +
geom_point() +
scale_x_continuous(breaks = round(seq(min(plotAccuracy$learning.evaluation.instances), max(plotAccuracy$learning.evaluation.instances), by = 3000),1)) +
scale_y_continuous(breaks = round(seq(min(plotAccuracy$classifications.correct..percent.), max(plotAccuracy$classifications.correct..percent.), by = 10),1))
dev.off()
}
files <- list.files(pattern = "\\.csv$", path = "csv/")
for (input in files){
output <- basename(file.path(input,fsep=".csv"))
graph  <- read.csv(paste0("csv/", input), sep= ",", header = T, fileEncoding="UTF-16LE")
png(paste0("output for ", input,".png"))
ggplot(graph, aes(learning.evaluation.instances,classifications.correct..percent.)) +
geom_point() +
scale_x_continuous(breaks = round(seq(min(graph$learning.evaluation.instances), max(graph$learning.evaluation.instances), by = 3000),1)) +
scale_y_continuous(breaks = round(seq(min(graph$classifications.correct..percent.), max(graph$classifications.correct..percent.), by = 10),1))
dev.off()
}
files <- list.files(pattern = "\\.csv$", path = "csv/")
for (input in files){
output <- basename(file.path(input,fsep=".csv"))
graph  <- read.csv(paste0("csv/", input), sep= ",", header = T, fileEncoding="UTF-16LE")
png(paste0("output for ", input,".png"))
plot(graph$learning.evaluation.instances, graph$classifications.correct..percent.)
dev.off()
}
files <- list.files(pattern = "\\.csv$", path = "csv/")
for (input in files){
output <- basename(file.path(input,fsep=".csv"))
graph  <- read.csv(paste0("csv/", input), sep= ",", header = T, fileEncoding="UTF-16LE")
ggplot(graph, aes(learning.evaluation.instances,classifications.correct..percent.)) +
geom_point() +
scale_x_continuous(breaks = round(seq(min(graph$learning.evaluation.instances), max(graph$learning.evaluation.instances), by = 3000),1)) +
scale_y_continuous(breaks = round(seq(min(graph$classifications.correct..percent.), max(graph$classifications.correct..percent.), by = 10),1))
}
files <- list.files(pattern = "\\.csv$", path = "csv/")
for (input in files){
graph  <- read.csv(paste0("csv/", input), sep= ",", header = T, fileEncoding="UTF-16LE")
ggplot(graph, aes(learning.evaluation.instances,classifications.correct..percent.)) +
geom_point() +
scale_x_continuous(breaks = round(seq(min(graph$learning.evaluation.instances), max(graph$learning.evaluation.instances), by = 3000),1)) +
scale_y_continuous(breaks = round(seq(min(graph$classifications.correct..percent.), max(graph$classifications.correct..percent.), by = 10),1))
}
files <- list.files(pattern = "\\.csv$", path = "csv/")
for (input in files){
graph  <- read.csv(paste0("csv/", input), sep= ",", header = T, fileEncoding="UTF-16LE")
ggplot(graph, aes(learning.evaluation.instances,classifications.correct..percent.)) +
geom_point() +
scale_x_continuous(breaks = round(seq(min(graph$learning.evaluation.instances), max(graph$learning.evaluation.instances), by = 3000),1)) +
scale_y_continuous(breaks = round(seq(min(graph$classifications.correct..percent.), max(graph$classifications.correct..percent.), by = 10),1))
plot(graph$learning.evaluation.instances, graph$classifications.correct..percent.)
}
files <- list.files(pattern = "\\.csv$", path = "csv/")
for (input in files){
output <- basename(file.path(input,fsep=".csv"))
graph  <- read.csv(paste0("csv/", input), sep= ",", header = T, fileEncoding="UTF-16LE")
png(paste0("output for ", input,".png"))
q <- ggplot(graph, aes(learning.evaluation.instances,classifications.correct..percent.)) +
geom_point() +
scale_x_continuous(breaks = round(seq(min(graph$learning.evaluation.instances), max(graph$learning.evaluation.instances), by = 3000),1)) +
scale_y_continuous(breaks = round(seq(min(graph$classifications.correct..percent.), max(graph$classifications.correct..percent.), by = 10),1))
# White background and black grid lines
q + theme_bw()
# Large brown bold italics labels
# and legend placed at top of plot
q + theme(axis.title=element_text(face="bold.italic",
size="12", color="brown"), legend.position="top")
dev.off()
}
files <- list.files(pattern = "\\.csv$", path = "csv/")
for (input in files){
output <- basename(file.path(input,fsep=".csv"))
graph  <- read.csv(paste0("csv/", input), sep= ",", header = T, fileEncoding="UTF-16LE")
q <- ggplot(graph, aes(learning.evaluation.instances,classifications.correct..percent.)) +
geom_point() +
scale_x_continuous(breaks = round(seq(min(graph$learning.evaluation.instances), max(graph$learning.evaluation.instances), by = 3000),1)) +
scale_y_continuous(breaks = round(seq(min(graph$classifications.correct..percent.), max(graph$classifications.correct..percent.), by = 10),1))
# White background and black grid lines
q + theme_bw()
# Large brown bold italics labels
# and legend placed at top of plot
q + theme(axis.title=element_text(face="bold.italic",
size="12", color="brown"), legend.position="top")
ggsave(q, file=paste0("output for ", input,".png"))
}
plotAccuracy = read.csv('dsresult.csv', sep= ",", header = T, fileEncoding="UTF-16LE")
plotAccuracy = read.csv('csv/dsresult.csv', sep= ",", header = T, fileEncoding="UTF-16LE")
q <- ggplot(plotAccuracy, aes(learning.evaluation.instances,classifications.correct..percent.)) +
geom_point() +
scale_x_continuous(breaks = round(seq(min(plotAccuracy$learning.evaluation.instances), max(plotAccuracy$learning.evaluation.instances), by = 3000),1)) +
scale_y_continuous(breaks = round(seq(min(plotAccuracy$classifications.correct..percent.), max(plotAccuracy$classifications.correct..percent.), by = 10),1))
q + theme_bw()
q + theme(axis.title=element_text(face="bold.italic",
size="12", color="brown"), legend.position="top")
q
p <- qplot(learning.evaluation.instances, classifications.correct..percent., data=plotAccuracy,
ylab="Accuracy[%]", xlab="Instance", geom="line")
plotAccuracy = read.csv('csv/dsresult.csv', sep= ",", header = T, fileEncoding="UTF-16LE")
ggplot(plotAccuracy, aes(learning.evaluation.instances,classifications.correct..percent.)) +
geom_point() +
scale_x_continuous(breaks = round(seq(min(plotAccuracy$learning.evaluation.instances), max(plotAccuracy$learning.evaluation.instances), by = 3000),1)) +
scale_y_continuous(breaks = round(seq(min(plotAccuracy$classifications.correct..percent.), max(plotAccuracy$classifications.correct..percent.), by = 10),1))
files <- list.files(pattern = "\\.csv$", path = "csv/")
for (input in files){
output <- basename(file.path(input,fsep=".csv"))
graph  <- read.csv(paste0("csv/", input), sep= ",", header = T, fileEncoding="UTF-16LE")
q <- ggplot(graph, aes(learning.evaluation.instances,classifications.correct..percent.)) +
geom_point() +
scale_x_continuous(breaks = round(seq(min(graph$learning.evaluation.instances), max(graph$learning.evaluation.instances), by = 3000),1)) +
scale_y_continuous(breaks = round(seq(min(graph$classifications.correct..percent.), max(graph$classifications.correct..percent.), by = 10),1))
+ theme_bw()
+ theme(axis.title=element_text(face="bold.italic",
size="12", color="brown"), legend.position="top")
ggsave(q, file=paste0("output for ", input,".png"))
}
files <- list.files(pattern = "\\.csv$", path = "csv/")
for (input in files){
output <- basename(file.path(input,fsep=".csv"))
graph  <- read.csv(paste0("csv/", input), sep= ",", header = T, fileEncoding="UTF-16LE")
q <- ggplot(graph, aes(learning.evaluation.instances,classifications.correct..percent.)) +
geom_point() +
scale_x_continuous(breaks = round(seq(min(graph$learning.evaluation.instances), max(graph$learning.evaluation.instances), by = 3000),1)) +
scale_y_continuous(breaks = round(seq(min(graph$classifications.correct..percent.), max(graph$classifications.correct..percent.), by = 10),1))
+ theme_bw()
+ theme(axis.title=element_text(face="bold.italic",
function (filename = default_name(plot), plot = last_plot(),
ggsave(q, file=paste0("output for ", input,".png"))
}
files <- list.files(pattern = "\\.csv$", path = "csv/")
files <- list.files(pattern = "\\.csv$", path = "csv/")
for (input in files){
output <- basename(file.path(input,fsep=".csv"))
graph  <- read.csv(paste0("csv/", input), sep= ",", header = T, fileEncoding="UTF-16LE")
q <- ggplot(graph, aes(learning.evaluation.instances,classifications.correct..percent.)) +
geom_point() +
scale_x_continuous(breaks = round(seq(min(graph$learning.evaluation.instances), max(graph$learning.evaluation.instances), by = 3000),1)) +
scale_y_continuous(breaks = round(seq(min(graph$classifications.correct..percent.), max(graph$classifications.correct..percent.), by = 10),1))
+ theme_bw()
+ theme(axis.title=element_text(face="bold.italic", size="12", color="brown"), legend.position="top")
ggsave(q, file=paste0("output for ", input,".png"))
}
files <- list.files(pattern = "\\.csv$", path = "csv/")
for (input in files){
output <- basename(file.path(input,fsep=".csv"))
graph  <- read.csv(paste0("csv/", input), sep= ",", header = T, fileEncoding="UTF-16LE")
q <- ggplot(graph, aes(learning.evaluation.instances,classifications.correct..percent.)) +
geom_point() +
scale_x_continuous(breaks = round(seq(min(graph$learning.evaluation.instances), max(graph$learning.evaluation.instances), by = 3000),1)) +
scale_y_continuous(breaks = round(seq(min(graph$classifications.correct..percent.), max(graph$classifications.correct..percent.), by = 10),1)) +
theme_bw() +
theme(axis.title=element_text(face="bold.italic", size="12", color="brown"), legend.position="top")
ggsave(q, file=paste0("output for ", input,".png"))
}
files <- list.files(pattern = "\\.csv$", path = "csv/")
for (input in files){
output <- basename(file.path(input,fsep=".csv"))
graph  <- read.csv(paste0("csv/", input), sep= ",", header = T, fileEncoding="UTF-16LE")
q <- ggplot(graph, aes(learning.evaluation.instances,classifications.correct..percent.)) +
geom_point() +
scale_x_continuous(breaks = round(seq(min(graph$learning.evaluation.instances), max(graph$learning.evaluation.instances), by = 3000),1)) +
scale_y_continuous(breaks = round(seq(min(graph$classifications.correct..percent.), max(graph$classifications.correct..percent.), by = 10),1)) +
theme_bw() +
theme(axis.title=element_text(face="bold.italic", size="12", color="brown"), legend.position="top")
ggsave(q, file=paste0("csv/", "output for ", input,".png"))
}
inPath  <- "csv/"
outPath <- "png/"
outExtension <- ".png"
files <- list.files(pattern = "\\.csv$", path = inPath)
for (input in files){
output <- basename(file.path(input,fsep=".csv"))
graph  <- read.csv(paste0("csv/", input), sep= ",", header = T, fileEncoding="UTF-16LE")
q <- ggplot(graph, aes(learning.evaluation.instances,classifications.correct..percent.)) +
geom_point() +
scale_x_continuous(breaks = round(seq(min(graph$learning.evaluation.instances), max(graph$learning.evaluation.instances), by = 3000),1)) +
scale_y_continuous(breaks = round(seq(min(graph$classifications.correct..percent.), max(graph$classifications.correct..percent.), by = 10),1)) +
theme_bw() +
theme(axis.title=element_text(face="bold.italic", size="12", color="brown"), legend.position="top")
ggsave(q, file=paste0(outPath, "output for ", input, outExtension))
}
inPath  <- "csv/"
outPath <- "plots/"
outExtension <- ".png"
inPath  <- "csv/"
outPath <- "plots/"
outExtension <- ".png"
files <- list.files(pattern = "\\.csv$", path = inPath)
for (input in files){
output <- basename(file.path(input,fsep=".csv"))
graph  <- read.csv(paste0("csv/", input), sep= ",", header = T, fileEncoding="UTF-16LE")
q <- ggplot(graph, aes(learning.evaluation.instances,classifications.correct..percent.)) +
geom_point() +
scale_x_continuous(breaks = round(seq(min(graph$learning.evaluation.instances), max(graph$learning.evaluation.instances), by = 3000),1)) +
scale_y_continuous(breaks = round(seq(min(graph$classifications.correct..percent.), max(graph$classifications.correct..percent.), by = 10),1)) +
theme_bw() +
theme(axis.title=element_text(face="bold.italic", size="12", color="brown"), legend.position="top")
ggsave(q, file=paste0(outPath, "output for ", input, outExtension))
}
inPath  <- "csv/"
outPath <- "plots/"
outExtension <- ".png"
files <- list.files(pattern = "\\.csv$", path = inPath)
for (input in files){
output <- basename(file.path(input,fsep=".csv"))
graph  <- read.csv(paste0("csv/", input), sep= ",", header = T, fileEncoding="UTF-16LE")
q <- ggplot(graph, aes(learning.evaluation.instances,classifications.correct..percent.)) +
geom_point() +
scale_x_continuous(breaks = round(seq(min(graph$learning.evaluation.instances), max(graph$learning.evaluation.instances), by = 3000),1)) +
scale_y_continuous(breaks = round(seq(min(graph$classifications.correct..percent.), max(graph$classifications.correct..percent.), by = 10),1)) +
theme_bw() +
theme(axis.title=element_text(face="bold.italic", size="12", color="brown"), legend.position="top")
ggsave(q, file=paste0(outPath, "output for ", input, outExtension))
}
inPath  <- "csv/"
outPath <- "plots/"
outExtension <- ".png"
files <- list.files(pattern = "\\.csv$", path = inPath)
for (input in files){
output <- basename(file.path(input,fsep=".csv"))
graph  <- read.csv(paste0("csv/", input), sep= ",", header = T, fileEncoding="UTF-16LE")
q <- ggplot(graph, aes(learning.evaluation.instances, classifications.correct..percent.)) +
geom_point() +
scale_x_continuous(breaks = round(seq(min(graph$learning.evaluation.instances),
max(graph$learning.evaluation.instances), by = 3000),1)) +
scale_y_continuous(breaks = round(seq(min(graph$classifications.correct..percent.),
max(graph$classifications.correct..percent.), by = 10),1)) +
theme_bw() +
theme(axis.title=element_text(face="bold.italic", size="12", color="brown"), legend.position="top")
ggsave(q, file=paste0(outPath, "output for ", input, outExtension))
}
library(ggplot2)
inPath  <- "csv/"
outPath <- "plots/"
outExtension <- ".png"
files <- list.files(pattern = "\\.csv$", path = inPath)
for (input in files){
output <- basename(file.path(input,fsep=".csv"))
graph  <- read.csv(paste0("csv/", input), sep= ",", header = T, fileEncoding="UTF-16LE")
q <- ggplot(graph, aes(learning.evaluation.instances, classifications.correct..percent.)) +
geom_point() +
scale_x_continuous(breaks = round(seq(min(graph$learning.evaluation.instances),
max(graph$learning.evaluation.instances), by = 3000),1)) +
scale_y_continuous(breaks = round(seq(min(graph$classifications.correct..percent.),
max(graph$classifications.correct..percent.), by = 10),1)) +
theme_bw() +
theme(axis.title=element_text(face="bold.italic", size="12", color="brown"), legend.position="top")
ggsave(q, file=paste0(outPath, "output for ", input, outExtension))
}
library(foreign)
elecDS <- read.arff("../realDatasets/elecNormNew.arff")
library(caret)
library(mlbench)
regVar <- c("vicprice")
#get subset of set
elecDS$time <- as.numeric(rownames(elecDS))
randomSample <- elecDS[sample(1:nrow(elecDS), 10000,replace=FALSE), ]
elecDS$logNSWprice = log(elecDS$nswprice)
#nswprices - hist
ggplot(elecDS, aes(x = logNSWprice)) +
geom_histogram(binwidth = 0.01)
#nswdemand - hist
ggplot(elecDS, aes(x = nswdemand)) +
geom_histogram(binwidth = 0.01)
elecDS$logNSWdemand = log(elecDS$nswdemand)
#lognswdemand - hist
ggplot(elecDS, aes(x = logNSWdemand)) +
geom_histogram(binwidth = 0.01)
#lognswdemand - hist
ggplot(elecDS, aes(x = logNSWdemand)) +
geom_histogram(binwidth = 0.01)
#nswdemand - hist
ggplot(elecDS, aes(x = nswdemand)) +
geom_histogram(binwidth = 0.01)
elecDS$logNSWdemand <- NULL
View(elecDS)
View(elecDS)
elecDS$peiod <- NULL
elecDS$date <- NULL
elecDS$day <- NULL
elecDS$vicprice <- NULL
elecDS$vicdemand <- NULL
elecDS$transfer <- NULL
elecDS$logNSWprice <- NULL
elecDS$time <- NULL
elecDS$period <- NULL
write.arff(elecDS, "elecDSnswOnly")
elecDS$logNSWprice = log(elecDS$nswprice)
View(elecDS)
View(elecDS)
elecDS$nswprice <- NULL
View(elecDS)
View(elecDS)
data[c("logNSWprice","nswdemand", "class")]
elecDS[c("logNSWprice","nswdemand", "class")]
elecDS <- elecDS[c("logNSWprice","nswdemand", "class")]
View(elecDS)
View(elecDS)
#lognswprices - hist
ggplot(elecDS, aes(x = logNSWprice)) +
geom_histogram(binwidth = 0.01)
write.arff(elecDS, "elecDSnswOnlyLogPrice")
write.arff(elecDS, "elecDSnswOnlyLogPrice.arff")
elecDS <- read.arff("../realDatasets/elecNormNew.arff")
elecTable <- table(elecDS)
elecTable <- table(elecDS$class)
classCount <- elecDS[sample(1:nrow(elecDS), 10000,replace=FALSE), ]
classCount <- table(elecDS$class)
baselineAccuracy = classCount[1]/(classCount[0]+classCount[1])
classCount(0)
classCount[0]
classCount
classCount["DOWN"]
classCount["DOWN"]
classCount["DOWN"]/(classCount["DOWN"]+classCount["UP"])
baselineAccuracy = classCount["DOWN"]/(classCount["DOWN"]+classCount["UP"])
baselineAccuracy <- classCount["DOWN"]/(classCount["DOWN"]+classCount["UP"])
baselineAccuracy = classCount["DOWN"]/(classCount["DOWN"]+classCount["UP"])
elecDS <- read.arff("../realDatasets/elecNormNew.arff")
View(elecDS)
View(elecDS)
library(foreign)
elecDS <- read.arff("../../moa/realDatasets/elecNormNew.arff")
library(caret)
library(mlbench)
regVar <- c("vicprice")
#get subset of set
randomSample <- elecDS[sample(1:nrow(elecDS), 10000,replace=FALSE), ]
classCount <- table(elecDS$class)
baselineAccuracy = classCount["DOWN"]/(classCount["DOWN"]+classCount["UP"])
elecDS$vicprice <- NULL
elecDS$vicdemand <- NULL
elecDS$transfer <- NULL
elecDS$logNSWprice <- NULL
elecDS$time <- NULL
write.arff(elecDS, "elecDSnswOnly.arff")
####
#PLOTING
####
elecDS$logNSWprice = log(elecDS$nswprice)
elecDS$nswprice <- NULL
elecDS <- elecDS[c("logNSWprice","nswdemand", "class")]
write.arff(elecDS, "elecDSnswOnlyLogPrice.arff")
#nswprices
elecDS$time <- as.numeric(rownames(elecDS))
ggplot(elecDS, aes(y = nswprice, x = time)) +
geom_point(aes(colour= class, shape= class), size = 3, alpha = .8)
#nswprices - hist
ggplot(elecDS, aes(x = nswprice)) +
geom_histogram(binwidth = 0.01)
#lognswprices - hist
ggplot(elecDS, aes(x = logNSWprice)) +
geom_histogram(binwidth = 0.01)
#nswdemand
ggplot(elecDS, aes(y = nswdemand, x = time)) +
geom_point(aes(colour= class, shape= class), size = 3, alpha = .8)
#nswdemand - boxplot
ggplot(elecDS, aes(y = nswdemand, x = class)) +
geom_boxplot(aes(fill = factor(class)))
#nswdemand - hist
ggplot(elecDS, aes(x = nswdemand)) +
geom_histogram(binwidth = 0.01)
elecDS$logNSWdemand <- NULL
#lognswdemand - hist
ggplot(elecDS, aes(x = logNSWdemand)) +
geom_histogram(binwidth = 0.01)
#vicprices
ggplot(elecDS, aes(y = transfer, x = time)) +
geom_point(aes(colour= class, shape= class), size = 3, alpha = .8)
featurePlot(x=iris[, 1:3], y=iris[,5], plot="scatter")
library(hexbin)
ggplot (randomSample, aes (x = Sepal.Length, y = Sepal.Width, fill = Species)) +
stat_binhex (bins=5, aes (alpha = ..count..)) + facet_grid (. ~ Species)
first2500 <- elecDS[1:40000,]
first2500$time <- as.numeric(rownames(first2500))
first2500$nswprice <- first2500$nswprice*1000
ggplot(first2500, aes(y = nswprice, x = time)) +
geom_point(aes(colour= class, shape= class), size = 3, alpha = .8)
###################################################
# save to arff
#write.
View(randomSample)
View(randomSample)
View(elecDS)
View(elecDS)
View(elecDS)
View(elecDS)
write.arff(elecDS, "elecDSnswOnly.arff")
View(elecDS)
View(elecDS)
library(foreign)
elecDS <- read.arff("../../moa/realDatasets/elecNormNew.arff")
library(caret)
library(mlbench)
regVar <- c("vicprice")
#get subset of set
randomSample <- elecDS[sample(1:nrow(elecDS), 10000,replace=FALSE), ]
classCount <- table(elecDS$class)
baselineAccuracy = classCount["DOWN"]/(classCount["DOWN"]+classCount["UP"])
elecDS$vicprice <- NULL
elecDS$vicdemand <- NULL
elecDS$transfer <- NULL
elecDS$logNSWprice <- NULL
elecDS$time <- NULL
write.arff(elecDS, "elecDSnswOnly.arff")
####
#PLOTING
####
#elecDS$logNSWprice = log(elecDS$nswprice)
#elecDS$nswprice <- NULL
elecDS <- elecDS[c("logNSWprice","nswdemand", "class")]
write.arff(elecDS, "elecDSnswOnlyLogPrice.arff")
#nswprices
elecDS$time <- as.numeric(rownames(elecDS))
ggplot(elecDS, aes(y = nswprice, x = time)) +
geom_point(aes(colour= class, shape= class), size = 3, alpha = .8)
#nswprices - hist
ggplot(elecDS, aes(x = nswprice)) +
geom_histogram(binwidth = 0.01)
#lognswprices - hist
ggplot(elecDS, aes(x = logNSWprice)) +
geom_histogram(binwidth = 0.01)
#nswdemand
ggplot(elecDS, aes(y = nswdemand, x = time)) +
geom_point(aes(colour= class, shape= class), size = 3, alpha = .8)
#nswdemand - boxplot
ggplot(elecDS, aes(y = nswdemand, x = class)) +
geom_boxplot(aes(fill = factor(class)))
#nswdemand - hist
ggplot(elecDS, aes(x = nswdemand)) +
geom_histogram(binwidth = 0.01)
elecDS$logNSWdemand <- NULL
#lognswdemand - hist
ggplot(elecDS, aes(x = logNSWdemand)) +
geom_histogram(binwidth = 0.01)
#vicprices
ggplot(elecDS, aes(y = transfer, x = time)) +
geom_point(aes(colour= class, shape= class), size = 3, alpha = .8)
featurePlot(x=iris[, 1:3], y=iris[,5], plot="scatter")
library(hexbin)
ggplot (randomSample, aes (x = Sepal.Length, y = Sepal.Width, fill = Species)) +
stat_binhex (bins=5, aes (alpha = ..count..)) + facet_grid (. ~ Species)
View(elecDS)
View(elecDS)
ggplot(elecDS, aes(y = nswprice, x = time)) +
geom_point(aes(colour= class, shape= class), size = 3, alpha = .8)
library(foreign)
elecDS <- read.arff("../../moa/realDatasets/elecNormNew.arff")
library(caret)
library(mlbench)
regVar <- c("vicprice")
#get subset of set
randomSample <- elecDS[sample(1:nrow(elecDS), 10000,replace=FALSE), ]
classCount <- table(elecDS$class)
baselineAccuracy = classCount["DOWN"]/(classCount["DOWN"]+classCount["UP"])
elecDS$vicprice <- NULL
elecDS$vicdemand <- NULL
elecDS$transfer <- NULL
elecDS$logNSWprice <- NULL
elecDS$time <- NULL
write.arff(elecDS, "elecDSnswOnly.arff")
####
#PLOTING
####
elecDS <- elecDS[c("logNSWprice","nswdemand", "class")]
write.arff(elecDS, "elecDSnswOnlyLogPrice.arff")
#nswprices
elecDS$time <- as.numeric(rownames(elecDS))
ggplot(elecDS, aes(y = nswprice, x = time)) +
geom_point(aes(colour= class, shape= class), size = 3, alpha = .8)
